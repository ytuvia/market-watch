{
  "Parameters": {
    "env": {
      "Type": "String"
    },
    "domain": {
      "Type": "String",
      "Default": ""
    },
    "restrictAccess": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "ParamZipPath": {
      "Type": "String"
    },
    "apimarketwatchGraphQLAPIIdOutput": {
      "Type": "String"
    },
    "apimarketwatchGraphQLAPIEndpointOutput": {
      "Type": "String"
    },
    "apimarketwatchGraphQLAPIKeyOutput": {
      "Type": "String"
    },
    "NetworkStackClusterName": {
      "Type": "String"
    },
    "NetworkStackVpcId": {
      "Type": "String"
    },
    "NetworkStackVpcCidrBlock": {
      "Type": "String"
    },
    "NetworkStackSubnetIds": {
      "Type": "CommaDelimitedList"
    },
    "NetworkStackVpcLinkId": {
      "Type": "String"
    },
    "NetworkStackCloudMapNamespaceId": {
      "Type": "String"
    },
    "rootStackName": {
      "Type": "String"
    },
    "deploymentBucketName": {
      "Type": "String"
    },
    "awaiterS3Key": {
      "Type": "String",
      "Default": "custom-resource-pipeline-awaiter.zip"
    }
  },
  "Conditions": {
    "isAuthCondition": {
      "Fn::And": [
        {
          "Fn::Equals": [
            false,
            true
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                "",
                ""
              ]
            }
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                "",
                ""
              ]
            }
          ]
        }
      ]
    }
  },
  "Resources": {
    "CloudmapService": {
      "Type": "AWS::ServiceDiscovery::Service",
      "Properties": {
        "DnsConfig": {
          "DnsRecords": [
            {
              "TTL": 60,
              "Type": "SRV"
            }
          ],
          "NamespaceId": {
            "Ref": "NetworkStackCloudMapNamespaceId"
          },
          "RoutingPolicy": "MULTIVALUE"
        },
        "Name": "apicontainer"
      }
    },
    "TaskDefinitionTaskRoleFD40A61D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "TaskDefinitionTaskRoleDefaultPolicy282E8624": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "appsync:GraphQL",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:appsync:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":apis/",
                      {
                        "Ref": "apimarketwatchGraphQLAPIIdOutput"
                      },
                      "/types/Query/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:appsync:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":apis/",
                      {
                        "Ref": "apimarketwatchGraphQLAPIIdOutput"
                      },
                      "/types/Mutation/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:appsync:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":apis/",
                      {
                        "Ref": "apimarketwatchGraphQLAPIIdOutput"
                      },
                      "/types/Subscription/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "TaskDefinitionTaskRoleDefaultPolicy282E8624",
        "Roles": [
          {
            "Ref": "TaskDefinitionTaskRoleFD40A61D"
          }
        ]
      }
    },
    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [],
            "EntryPoint": [],
            "Environment": [
              {
                "Name": "API_MARKETWATCH_GRAPHQLAPIENDPOINTOUTPUT",
                "Value": {
                  "Ref": "apimarketwatchGraphQLAPIEndpointOutput"
                }
              },
              {
                "Name": "API_MARKETWATCH_GRAPHQLAPIIDOUTPUT",
                "Value": {
                  "Ref": "apimarketwatchGraphQLAPIIdOutput"
                }
              },
              {
                "Name": "API_MARKETWATCH_GRAPHQLAPIKEYOUTPUT",
                "Value": {
                  "Ref": "apimarketwatchGraphQLAPIKeyOutput"
                }
              }
            ],
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ".dkr.ecr.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/amplify-marketwatch-demo-142426-api-apicontainer-api:latest"
                ]
              ]
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "apiContainerLogGroupA9A8D168"
                },
                "awslogs-stream-prefix": "ecs",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Name": "api",
            "PortMappings": [
              {
                "ContainerPort": 80,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Cpu": "512",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "TaskDefinitionExecutionRole8D61C2FB",
            "Arn"
          ]
        },
        "Family": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "rootStackName"
              },
              "-apicontainer"
            ]
          ]
        },
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "TaskDefinitionTaskRoleFD40A61D",
            "Arn"
          ]
        }
      }
    },
    "TaskDefinitionExecutionRole8D61C2FB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ecr:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":repository/amplify-marketwatch-demo-142426-api-apicontainer-api"
                  ]
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:",
                    {
                      "Ref": "apiContainerLogGroupA9A8D168"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5",
        "Roles": [
          {
            "Ref": "TaskDefinitionExecutionRole8D61C2FB"
          }
        ]
      }
    },
    "apiContainerLogGroupA9A8D168": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/ecs/",
              {
                "Ref": "rootStackName"
              },
              "-apicontainer-api"
            ]
          ]
        },
        "RetentionInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ServiceSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Service SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Ref": "NetworkStackVpcCidrBlock"
            },
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "NetworkStackVpcId"
        }
      }
    },
    "Service": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "NetworkStackClusterName"
        },
        "DesiredCount": 1,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "ServiceSG",
                  "GroupId"
                ]
              }
            ],
            "Subnets": {
              "Ref": "NetworkStackSubnetIds"
            }
          }
        },
        "ServiceName": "apicontainer-service-api-80",
        "ServiceRegistries": [
          {
            "ContainerName": "api",
            "ContainerPort": 80,
            "RegistryArn": {
              "Fn::GetAtt": [
                "CloudmapService",
                "Arn"
              ]
            }
          }
        ],
        "TaskDefinition": {
          "Ref": "TaskDefinition"
        }
      }
    },
    "ApiPipelineCodeBuildProjectRoleCFB98631": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ApiPipelineCodeBuildProjectRoleDefaultPolicyAF1730E7": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "ApiPipelineCodeBuildProject117EE1BE"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "ApiPipelineCodeBuildProject117EE1BE"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codebuild:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":report-group/",
                    {
                      "Ref": "ApiPipelineCodeBuildProject117EE1BE"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
                "ecr:InitiateLayerUpload",
                "ecr:BatchCheckLayerAvailability",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload",
                "ecr:PutImage"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiPipelineCodeBuildProjectRoleDefaultPolicyAF1730E7",
        "Roles": [
          {
            "Ref": "ApiPipelineCodeBuildProjectRoleCFB98631"
          }
        ]
      }
    },
    "ApiPipelineCodeBuildProject117EE1BE": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:4.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "ApiPipelineCodeBuildProjectRoleCFB98631",
            "Arn"
          ]
        },
        "Source": {
          "Type": "CODEPIPELINE"
        },
        "Cache": {
          "Type": "NO_CACHE"
        },
        "EncryptionKey": "alias/aws/s3"
      }
    },
    "PreDeployLambdaServiceRole87EE44C9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "PreDeployLambdaServiceRoleDefaultPolicyD9F42A87": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": {
                "Ref": "Service"
              }
            },
            {
              "Action": [
                "codepipeline:PutJobSuccessResult",
                "codepipeline:PutJobFailureResult"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "PreDeployLambdaServiceRoleDefaultPolicyD9F42A87",
        "Roles": [
          {
            "Ref": "PreDeployLambdaServiceRole87EE44C9"
          }
        ]
      }
    },
    "PreDeployLambdaF7CAA99F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const { CodePipeline } = require('@aws-sdk/client-codepipeline');\nconst { ECS } = require('@aws-sdk/client-ecs');\n\nconst codepipeline = new CodePipeline();\nconst ecs = new ECS();\n\nconst { DESIRED_COUNT: desiredCountStr, CLUSTER_NAME: cluster, SERVICE_NAME: service } = process.env;\n\nconst desiredCount = parseInt(desiredCountStr, 10);\n\nexports.handler = async function({ 'CodePipeline.job': { id: jobId } }) {\n  await ecs.updateService({\n    service,\n    cluster,\n    desiredCount,\n  });\n\n  return await codepipeline.putJobSuccessResult({ jobId });\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "PreDeployLambdaServiceRole87EE44C9",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "DESIRED_COUNT": "1",
            "CLUSTER_NAME": {
              "Ref": "NetworkStackClusterName"
            },
            "SERVICE_NAME": "apicontainer-service-api-80"
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs18.x",
        "Timeout": 15
      },
      "DependsOn": [
        "PreDeployLambdaServiceRoleDefaultPolicyD9F42A87",
        "PreDeployLambdaServiceRole87EE44C9"
      ]
    },
    "ApiPipelinePipelineRole8C805448": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelineRoleDefaultPolicyB3AD67CF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiPipelinePipelineDeployCodePipelineActionRoleEA4B81BD",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiPipelinePipelineRoleDefaultPolicyB3AD67CF",
        "Roles": [
          {
            "Ref": "ApiPipelinePipelineRole8C805448"
          }
        ]
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipeline68596884": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": [
            "ApiPipelinePipelineRole8C805448",
            "Arn"
          ]
        },
        "Stages": [
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "S3",
                  "Version": "1"
                },
                "Configuration": {
                  "S3Bucket": {
                    "Ref": "deploymentBucketName"
                  },
                  "S3ObjectKey": {
                    "Ref": "ParamZipPath"
                  }
                },
                "Name": "Source",
                "OutputArtifacts": [
                  {
                    "Name": "SourceArtifact"
                  }
                ],
                "RoleArn": {
                  "Fn::GetAtt": [
                    "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "Source"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "ApiPipelineCodeBuildProject117EE1BE"
                  },
                  "EnvironmentVariables": {
                    "Fn::Join": [
                      "",
                      [
                        "[{\"name\":\"AWS_ACCOUNT_ID\",\"type\":\"PLAINTEXT\",\"value\":\"",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "\"},{\"name\":\"api_REPOSITORY_URI\",\"type\":\"PLAINTEXT\",\"value\":\"",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ".dkr.ecr.",
                        {
                          "Ref": "AWS::Region"
                        },
                        ".",
                        {
                          "Ref": "AWS::URLSuffix"
                        },
                        "/amplify-marketwatch-demo-142426-api-apicontainer-api\"}]"
                      ]
                    ]
                  }
                },
                "InputArtifacts": [
                  {
                    "Name": "SourceArtifact"
                  }
                ],
                "Name": "Build",
                "OutputArtifacts": [
                  {
                    "Name": "BuildArtifact"
                  }
                ],
                "RoleArn": {
                  "Fn::GetAtt": [
                    "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "Build"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Invoke",
                  "Owner": "AWS",
                  "Provider": "Lambda",
                  "Version": "1"
                },
                "Configuration": {
                  "FunctionName": {
                    "Ref": "PreDeployLambdaF7CAA99F"
                  }
                },
                "Name": "Predeploy",
                "RoleArn": {
                  "Fn::GetAtt": [
                    "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "Predeploy"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Provider": "ECS",
                  "Version": "1"
                },
                "Configuration": {
                  "ClusterName": {
                    "Ref": "NetworkStackClusterName"
                  },
                  "ServiceName": "apicontainer-service-api-80"
                },
                "InputArtifacts": [
                  {
                    "Name": "BuildArtifact"
                  }
                ],
                "Name": "Deploy",
                "RoleArn": {
                  "Fn::GetAtt": [
                    "ApiPipelinePipelineDeployCodePipelineActionRoleEA4B81BD",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "Deploy"
          }
        ],
        "ArtifactStore": {
          "Location": {
            "Ref": "deploymentBucketName"
          },
          "Type": "S3"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "rootStackName"
              },
              "-apicontainer-service-api-80"
            ]
          ]
        }
      },
      "DependsOn": [
        "ApiPipelinePipelineRoleDefaultPolicyB3AD67CF",
        "ApiPipelinePipelineRole8C805448",
        "Service"
      ]
    },
    "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelineSourceCodePipelineActionRoleDefaultPolicyE5B48B86": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      },
                      "/",
                      {
                        "Ref": "ParamZipPath"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiPipelinePipelineSourceCodePipelineActionRoleDefaultPolicyE5B48B86",
        "Roles": [
          {
            "Ref": "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A"
          }
        ]
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelineBuildCodePipelineActionRoleDefaultPolicy821C7A3A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiPipelineCodeBuildProject117EE1BE",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiPipelinePipelineBuildCodePipelineActionRoleDefaultPolicy821C7A3A",
        "Roles": [
          {
            "Ref": "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B"
          }
        ]
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelinePredeployCodePipelineActionRoleDefaultPolicy715F96BC": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:ListFunctions",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PreDeployLambdaF7CAA99F",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PreDeployLambdaF7CAA99F",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiPipelinePipelinePredeployCodePipelineActionRoleDefaultPolicy715F96BC",
        "Roles": [
          {
            "Ref": "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4"
          }
        ]
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelineDeployCodePipelineActionRoleEA4B81BD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "DependsOn": [
        "Service"
      ]
    },
    "ApiPipelinePipelineDeployCodePipelineActionRoleDefaultPolicyB03FE2A4": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:DescribeServices",
                "ecs:DescribeTaskDefinition",
                "ecs:DescribeTasks",
                "ecs:ListTasks",
                "ecs:RegisterTaskDefinition",
                "ecs:UpdateService"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEqualsIfExists": {
                  "iam:PassedToService": [
                    "ec2.amazonaws.com",
                    "ecs-tasks.amazonaws.com"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "deploymentBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiPipelinePipelineDeployCodePipelineActionRoleDefaultPolicyB03FE2A4",
        "Roles": [
          {
            "Ref": "ApiPipelinePipelineDeployCodePipelineActionRoleEA4B81BD"
          }
        ]
      },
      "DependsOn": [
        "Service"
      ]
    },
    "AwaiterCustomEventHandlerServiceRoleCC4D5DBF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AwaiterCustomEventHandler8B7CBA73": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async function({ RequestType, PhysicalResourceId, ResourceProperties }) {\n  switch (RequestType) {\n    case 'Delete':\n    case 'Update':\n      return { PhysicalResourceId };\n  }\n\n  const { pipelineName } = ResourceProperties;\n\n  const result = {\n    PhysicalResourceId: `pipelineawaiter-${pipelineName}`,\n  };\n\n  return result;\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "AwaiterCustomEventHandlerServiceRoleCC4D5DBF",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs18.x",
        "Timeout": 15
      },
      "DependsOn": [
        "AwaiterCustomEventHandlerServiceRoleCC4D5DBF"
      ]
    },
    "AwaiterCustomCompleteHandlerServiceRoleFFF75973": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AwaiterCustomCompleteHandlerServiceRoleDefaultPolicyB6596557": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codepipeline:GetPipeline",
                "codepipeline:ListPipelineExecutions"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codepipeline:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiPipelinePipeline68596884"
                    }
                  ]
                ]
              }
            },
            {
              "Action": "cloudformation:DescribeStacks",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AWS::StackId"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AwaiterCustomCompleteHandlerServiceRoleDefaultPolicyB6596557",
        "Roles": [
          {
            "Ref": "AwaiterCustomCompleteHandlerServiceRoleFFF75973"
          }
        ]
      }
    },
    "AwaiterCustomCompleteHandler21A45EDC": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const { CloudFormation } = require('@aws-sdk/client-cloudformation');\nconst { CodePipeline } = require('@aws-sdk/client-codepipeline');\n\nconst stageName = 'Source';\nconst actionName = 'Source';\n\nconst codePipeline = new CodePipeline();\nconst cloudFormation = new CloudFormation();\n\nexports.handler = async function({ RequestType, ResourceProperties, StackId }) {\n  const { pipelineName, artifactBucketName, artifactKey, deploymentMechanism } = ResourceProperties;\n\n  console.log('Properties', ResourceProperties);\n\n  switch (RequestType) {\n    case 'Delete':\n      return { IsComplete: true };\n    case 'Update':\n      const [, StackName] = StackId.split('/');\n      const { Stacks } = await cloudFormation.describeStacks({ StackName });\n      const [{ StackStatus }] = Stacks;\n\n      if (StackStatus.includes('ROLLBACK')) {\n        return { IsComplete: true };\n      }\n  }\n\n  let stages;\n\n  try {\n    const { pipeline } = await codePipeline.getPipeline({ name: pipelineName });\n\n    ({ stages } = pipeline);\n  } catch (error) {\n    const { code } = error;\n\n    switch (code) {\n      case 'PipelineNotFoundException':\n        console.warn(error);\n\n        return {\n          IsComplete: false,\n        };\n      default:\n        throw error;\n    }\n  }\n\n  const stage = stages.find(({ name }) => name === stageName);\n\n  if (stage === undefined) {\n    throw new Error(`There is no stage named \"${stageName}\" in the \"${pipelineName}\" pipeline`);\n  }\n\n  const action = stage.actions.find(({ name }) => name === actionName);\n\n  if (action === undefined) {\n    throw new Error(`There is no action named \"${actionName}\" in the \"${stageName}\" stage of the \"${pipelineName}\" pipeline`);\n  }\n\n  const {\n    configuration,\n    configuration: { S3Bucket, S3ObjectKey },\n  } = action;\n\n  if (deploymentMechanism === 'FULLY_MANAGED') {\n    if (S3Bucket !== artifactBucketName || S3ObjectKey !== artifactKey) {\n      console.warn(\n        `Bucket \"${artifactBucketName}\" and key \"${artifactKey}\" dont match the \"${actionName}\" action configuration ${JSON.stringify(\n          configuration,\n        )}`,\n      );\n\n      return {\n        IsComplete: false,\n      };\n    }\n  }\n\n  let execution;\n\n  try {\n    const { pipelineExecutionSummaries } = await codePipeline.listPipelineExecutions({ pipelineName });\n\n    [execution] = pipelineExecutionSummaries;\n  } catch (error) {\n    console.warn(error);\n\n    return {\n      IsComplete: false,\n    };\n  }\n\n  console.log(execution);\n\n  const { status } = execution || {};\n\n  let IsComplete = false;\n\n  switch (status) {\n    case 'Failed':\n    case 'Stopped':\n      throw new Error(\"The execution didn't succeed\");\n    case 'Succeeded':\n      IsComplete = true;\n  }\n\n  return { IsComplete };\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "AwaiterCustomCompleteHandlerServiceRoleFFF75973",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs18.x",
        "Timeout": 15
      },
      "DependsOn": [
        "AwaiterCustomCompleteHandlerServiceRoleDefaultPolicyB6596557",
        "AwaiterCustomCompleteHandlerServiceRoleFFF75973"
      ]
    },
    "AwaiterMyProviderframeworkonEventServiceRole3DA490A7": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AwaiterMyProviderframeworkonEventServiceRoleDefaultPolicy41437CAE": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterCustomEventHandler8B7CBA73",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterCustomEventHandler8B7CBA73",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterCustomCompleteHandler21A45EDC",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterCustomCompleteHandler21A45EDC",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AwaiterMyProviderwaiterstatemachineCF09BEC8"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AwaiterMyProviderframeworkonEventServiceRoleDefaultPolicy41437CAE",
        "Roles": [
          {
            "Ref": "AwaiterMyProviderframeworkonEventServiceRole3DA490A7"
          }
        ]
      }
    },
    "AwaiterMyProviderframeworkonEventB703D418": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "deploymentBucketName"
          },
          "S3Key": {
            "Ref": "awaiterS3Key"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "AwaiterMyProviderframeworkonEventServiceRole3DA490A7",
            "Arn"
          ]
        },
        "Description": "AWS CDK resource provider framework - onEvent (ContainersStack/AwaiterMyProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "AwaiterCustomEventHandler8B7CBA73",
                "Arn"
              ]
            },
            "USER_IS_COMPLETE_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "AwaiterCustomCompleteHandler21A45EDC",
                "Arn"
              ]
            },
            "WAITER_STATE_MACHINE_ARN": {
              "Ref": "AwaiterMyProviderwaiterstatemachineCF09BEC8"
            }
          }
        },
        "Handler": "framework.onEvent",
        "Runtime": "nodejs16.x",
        "Timeout": 900
      },
      "DependsOn": [
        "AwaiterMyProviderframeworkonEventServiceRoleDefaultPolicy41437CAE",
        "AwaiterMyProviderframeworkonEventServiceRole3DA490A7"
      ]
    },
    "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AwaiterMyProviderframeworkisCompleteServiceRoleDefaultPolicyA36828FB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterCustomEventHandler8B7CBA73",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterCustomEventHandler8B7CBA73",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterCustomCompleteHandler21A45EDC",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterCustomCompleteHandler21A45EDC",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AwaiterMyProviderframeworkisCompleteServiceRoleDefaultPolicyA36828FB",
        "Roles": [
          {
            "Ref": "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0"
          }
        ]
      }
    },
    "AwaiterMyProviderframeworkisComplete18658065": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "deploymentBucketName"
          },
          "S3Key": {
            "Ref": "awaiterS3Key"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0",
            "Arn"
          ]
        },
        "Description": "AWS CDK resource provider framework - isComplete (ContainersStack/AwaiterMyProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "AwaiterCustomEventHandler8B7CBA73",
                "Arn"
              ]
            },
            "USER_IS_COMPLETE_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "AwaiterCustomCompleteHandler21A45EDC",
                "Arn"
              ]
            }
          }
        },
        "Handler": "framework.isComplete",
        "Runtime": "nodejs16.x",
        "Timeout": 900
      },
      "DependsOn": [
        "AwaiterMyProviderframeworkisCompleteServiceRoleDefaultPolicyA36828FB",
        "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0"
      ]
    },
    "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AwaiterMyProviderframeworkonTimeoutServiceRoleDefaultPolicyCB302F22": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterCustomEventHandler8B7CBA73",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterCustomEventHandler8B7CBA73",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterCustomCompleteHandler21A45EDC",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterCustomCompleteHandler21A45EDC",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AwaiterMyProviderframeworkonTimeoutServiceRoleDefaultPolicyCB302F22",
        "Roles": [
          {
            "Ref": "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A"
          }
        ]
      }
    },
    "AwaiterMyProviderframeworkonTimeoutCC4166A7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "deploymentBucketName"
          },
          "S3Key": {
            "Ref": "awaiterS3Key"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A",
            "Arn"
          ]
        },
        "Description": "AWS CDK resource provider framework - onTimeout (ContainersStack/AwaiterMyProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "AwaiterCustomEventHandler8B7CBA73",
                "Arn"
              ]
            },
            "USER_IS_COMPLETE_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "AwaiterCustomCompleteHandler21A45EDC",
                "Arn"
              ]
            }
          }
        },
        "Handler": "framework.onTimeout",
        "Runtime": "nodejs16.x",
        "Timeout": 900
      },
      "DependsOn": [
        "AwaiterMyProviderframeworkonTimeoutServiceRoleDefaultPolicyCB302F22",
        "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A"
      ]
    },
    "AwaiterMyProviderwaiterstatemachineRoleD2CF7945": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "states"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AwaiterMyProviderwaiterstatemachineRoleDefaultPolicy17602DC1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterMyProviderframeworkisComplete18658065",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterMyProviderframeworkisComplete18658065",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AwaiterMyProviderframeworkonTimeoutCC4166A7",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AwaiterMyProviderframeworkonTimeoutCC4166A7",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AwaiterMyProviderwaiterstatemachineRoleDefaultPolicy17602DC1",
        "Roles": [
          {
            "Ref": "AwaiterMyProviderwaiterstatemachineRoleD2CF7945"
          }
        ]
      }
    },
    "AwaiterMyProviderwaiterstatemachineCF09BEC8": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"framework-isComplete-task\",\"States\":{\"framework-isComplete-task\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"States.ALL\"],\"IntervalSeconds\":10,\"MaxAttempts\":180,\"BackoffRate\":1}],\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"Next\":\"framework-onTimeout-task\"}],\"Type\":\"Task\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "AwaiterMyProviderframeworkisComplete18658065",
                  "Arn"
                ]
              },
              "\"},\"framework-onTimeout-task\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "AwaiterMyProviderframeworkonTimeoutCC4166A7",
                  "Arn"
                ]
              },
              "\"}}}"
            ]
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "AwaiterMyProviderwaiterstatemachineRoleD2CF7945",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AwaiterMyProviderwaiterstatemachineRoleDefaultPolicy17602DC1",
        "AwaiterMyProviderwaiterstatemachineRoleD2CF7945"
      ]
    },
    "DeploymentAwaiter": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "AwaiterMyProviderframeworkonEventB703D418",
            "Arn"
          ]
        },
        "artifactBucketName": {
          "Ref": "deploymentBucketName"
        },
        "artifactKey": {
          "Ref": "ParamZipPath"
        },
        "pipelineName": {
          "Ref": "ApiPipelinePipeline68596884"
        },
        "deploymentMechanism": "FULLY_MANAGED"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "Api": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "CorsConfiguration": {
          "AllowHeaders": [
            "*"
          ],
          "AllowMethods": [
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT"
          ],
          "AllowOrigins": [
            "*"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "rootStackName"
              },
              "-apicontainer"
            ]
          ]
        },
        "ProtocolType": "HTTP"
      }
    },
    "Stage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "Api"
        },
        "StageName": "$default",
        "AutoDeploy": true
      }
    },
    "ANYIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "Api"
        },
        "IntegrationType": "HTTP_PROXY",
        "ConnectionId": {
          "Ref": "NetworkStackVpcLinkId"
        },
        "ConnectionType": "VPC_LINK",
        "IntegrationMethod": "ANY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CloudmapService",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "1.0"
      }
    },
    "Authorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "Api"
        },
        "AuthorizerType": "JWT",
        "Name": "apicontainerAuthorizer",
        "IdentitySource": [
          "$request.header.Authorization"
        ],
        "JwtConfiguration": {
          "Audience": [],
          "Issuer": {
            "Fn::Join": [
              "",
              [
                "https://cognito-idp.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com/"
              ]
            ]
          }
        }
      },
      "Condition": "isAuthCondition"
    },
    "DefaultRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "Api"
        },
        "RouteKey": "$default",
        "AuthorizationScopes": [],
        "AuthorizationType": {
          "Fn::If": [
            "isAuthCondition",
            "JWT",
            "NONE"
          ]
        },
        "AuthorizerId": {
          "Fn::If": [
            "isAuthCondition",
            {
              "Ref": "Authorizer"
            },
            ""
          ]
        },
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "ANYIntegration"
              }
            ]
          ]
        }
      }
    },
    "OptionsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "Api"
        },
        "RouteKey": "OPTIONS /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "ANYIntegration"
              }
            ]
          ]
        }
      }
    },
    "CustomExecutionPolicyForContainer": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "comprehend:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "translate:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "ssm:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "secretsmanager:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomExecutionPolicyForContainer",
        "Roles": [
          {
            "Ref": "TaskDefinitionTaskRoleFD40A61D"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServiceName": {
      "Value": "apicontainer-service-api-80"
    },
    "ClusterName": {
      "Value": {
        "Ref": "NetworkStackClusterName"
      }
    },
    "PipelineName": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "rootStackName"
            },
            "-apicontainer-service-api-80"
          ]
        ]
      }
    },
    "ContainerNames": {
      "Value": "api"
    },
    "ApiName": {
      "Value": "apicontainer"
    },
    "RootUrl": {
      "Value": {
        "Fn::GetAtt": [
          "Api",
          "ApiEndpoint"
        ]
      }
    }
  },
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com"
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com"
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com"
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com"
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com"
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com"
      },
      "ap-south-2": {
        "states": "states.ap-south-2.amazonaws.com"
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com"
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com"
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com"
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com"
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com"
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com"
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com"
      },
      "eu-central-2": {
        "states": "states.eu-central-2.amazonaws.com"
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com"
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com"
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com"
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com"
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com"
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com"
      },
      "me-central-1": {
        "states": "states.me-central-1.amazonaws.com"
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com"
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com"
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com"
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com"
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com"
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com"
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com"
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com"
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com"
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com"
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com"
      }
    }
  }
}